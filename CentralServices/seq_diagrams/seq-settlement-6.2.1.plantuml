@startuml
' declate title
title Trigger the creation of a settlement event
'title 6.2.1. postSettlementEvent POST: /settlementEventTrigger

autonumber

' declare actors
actor "Hub Employee" as OPERATOR

boundary "Settlement Service API" as SSAPI
entity "Settlement DAO" as SETTLE_DAO

database "Central Store" as DB

box "Central HUB" #LightPink
    participant OPERATOR
end box

box "Settlement Service" #LightGreen
    participant SSAPI
    participant SETTLE_DAO
end box

box "Central Services" #LightYellow
    participant DB
end box

' start flow
group Trigger Settlement Event
activate OPERATOR
    note right of OPERATOR #Yellow
        {
          "settlementId": 0,
          "reason": "string",
          "settlementWindows": [
            {
              "id": 1,
            },
            {
              "id": 2,
            }
          ]
        }
    end note
    note right of OPERATOR #LightGray
        verify if we need the rest of the Swagger messages?
    end note
    OPERATOR -> SSAPI: POST - /settlement/{id}
    activate SSAPI
    SSAPI-> SETTLE_DAO: Create new settlement
    activate SETTLE_DAO
    SETTLE_DAO -> DB: Insert new settlement\n<color #FF0000><b>Error code:</b> 2001</color>
    activate DB
    hnote over DB #LightYellow
        INSERT INTO **settlement**
            (reason)
            VALUE (payload./settlementId/{reason});
    end hnote
    deactivate DB
    SETTLE_DAO -> DB: Get settlementWindow(s)\n<color #FF0000><b>Error code:</b> 2001</color>
    activate DB
    hnote over DB #LightYellow
        SELECT MAX(settlementWindowStateChangeId), settlementWindowStateId, reason
        FROM  **settlementWindowStateChange**
        WHERE settlementWindowId = payload./settlementWindow/{id}
        GROUP BY settlementWindowStateId,settlementWindowId, reason;
    end hnote
    deactivate DB

    group Validate the list of settlement windows
        note right of SETTLE_DAO #LightGray
            allSettlementWindowsClosed = true
        end note
        loop
            SETTLE_DAO <--> SETTLE_DAO: if settlementWindowStateId != 'CLOSED' \nthen allSettlementWindowsClosed = false
        end loop
    end

    alt allSettlementWindowsClosed == true
        group <color #blue>DB TRANSACTION</color>
            SETTLE_DAO -> DB: Insert the list of settlementWindows
            hnote over DB #LightYellow
                INSERT INTO **settlementSettlementWindow**
                	(settlementId, settlementWindowId)
                    VALUE(payload.settlementId, payload./settlementWindow/{id});
            end hnote
            SETTLE_DAO -> DB: Populate settlementTransferParticipant with aggregated data
            hnote over DB #LightYellow
                INSERT INTO **settlementTransferParticipant**
                    (settlementId, participantCurrencyId, transferParticipantRoleTypeId,
                    ledgerEntryTypeId, amount, createdDate)
                SELECT payload.settlementId AS settlementId, tp.participantCurrencyId,
                    tp.transferParticipantRoleTypeId, tp.ledgerEntryTypeId,
                    SUM(tp.amount) AS amount, CURDATE() AS createdDate
                FROM **transferFulfilment** AS tf
                JOIN **transferStateChange** AS tsc
                    ON tsc.transferId = tf.transferId AND tsc.transferStateId = ‘COMMITTED’
                JOIN **transferParticipant** AS tp
                    ON tp.transferId = tf.transferId
                WHERE tf.settlementWindowId
                    IN (SELECT settlementWindowId
                    FROM **settlementSettlementWindow**
                    WHERE settlementId = payload.settlementId)
                    GROUP BY tp.participantCurrencyId, tp.transferParticipantRoleTypeId,
                        tp.ledgerEntryTypeId
            end hnote
            SETTLE_DAO -> DB: Populate settlementParticipantCurrency with aggregated data
            hnote over DB #LightYellow
                INSERT INTO **settlementParticipantCurrency**
                    (settlementId, participantCurrencyId, netAmount)
                SELECT settlementId, participantCurrencyId,
                SUM(CASE
                     WHEN stp.transferParticipantRoleTypeId = 1 AND stp.ledgerEntryTypeId = 1 THEN amount
                     WHEN stp.transferParticipantRoleTypeId = 2 AND stp.ledgerEntryTypeId = 1 THEN -amount
                     WHEN stp.ledgerEntryTypeId = 2 THEN -amount
                   END )
                FROM **settlementTransferParticipant** AS stp
                WHERE settlementId = payload.settlementId
                GROUP BY settlementId, participantCurrencyId
            end hnote
            SETTLE_DAO -> DB: Insert initial state change 'PENDING_SETTLEMENT'
            hnote over DB #LightYellow
                INSERT INTO **settlementParticipantCurrencyStateChange**
                    (settlementParticipantCurrencyId, settlementStateId, reason)
                SELECT settlementParticipantCurrencyId, ‘PENDING_SETTLEMENT’, payload.reason
                FROM **settlementParticipantCurrency**
                WHERE settlementId = payload.settlementId
            end hnote
            SETTLE_DAO -> DB: Insert initial state for settlement 'PENDING_SETTLEMENT'
            hnote over DB #LightYellow
                INSERT INTO **settlementStateChange**
                    (settlementId, settlementStateId, reason)
                SELECT settlementId, ‘PENDING_SETTLEMENT’, payload.reason
                FROM **settlementParticipantCurrency**
                WHERE settlementId = payload.settlementId
            end hnote
            SETTLE_DAO -> DB: Insert new state for settlementWindow 'PENDING_SETTLEMENT'
            hnote over DB #LightYellow
                INSERT INTO **settlementWindowStateChange**
                    (settlementWindowId, settlementWindowStateId, reason)
                VALUE payload./settlementWindow/{id}, 'PENDING_SETTLEMENT', payload.reason
            end hnote
        end
        SSAPI <-- SETTLE_DAO: Results for participant netAmount per ledger for closed settlement window
        note left of SSAPI #Yellow
            {
              "id": "string",
              "reason": "string",
              "state": "PENDING_SETTLEMENT",
              "netSettlementAmount": {
                "amount": 0,
                "currency": "string"
              }
            }
        end note
        OPERATOR <-- SSAPI: Results for participant netAmount per ledger for closed settlement window
        deactivate SSAPI
    else allSettlementWindowsClosed == false
        SETTLE_DAO --> SSAPI: settlementWindows not closed - Return ERROR
        deactivate SETTLE_DAO
        activate SSAPI
        SSAPI <--> SSAPI: Update Event log
        note right of SSAPI #LightBlue
            Log ERROR Messages.
            Update Event log with ERROR.
            end note
        note left of SSAPI #Yellow
            {
              "status": 0,
              "code": "(ERROR response code eg. '404' - Defined in swagger definition))",
              "message": "string"
            }
        end note
        OPERATOR <-- SSAPI: Return ERROR
        deactivate SSAPI
    end
deactivate OPERATOR
end
@enduml
