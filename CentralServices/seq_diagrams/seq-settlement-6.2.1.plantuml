@startuml
' declate title
title 6.2.1. Trigger Settlement Event (settlementEventTrigger)
autonumber

' declare actors
actor "Hub Employee" as OPERATOR
boundary "Settlement Service API" as SSAPI
entity "Settlement DAO" as SETTLE_DAO
database "Central Store" as DB

box "Central HUB" #LightPink
    participant OPERATOR
end box

box "Settlement Service" #LightGreen
    participant SSAPI
    participant SETTLE_DAO
end box

box "Central Services" #LightYellow
    participant DB
end box

' start flow
group Trigger Settlement Event
activate OPERATOR
    note right of OPERATOR #Yellow
        {
            "id": 0,
            "reason": "string",
            "settlementWindows": [
                {
                    "id": 1,
                },
                {
                    "id": 2,
                }
            ]
        }
    end note
    OPERATOR -> SSAPI: POST - /settlement/{id}
    activate SSAPI
    SSAPI-> SETTLE_DAO: Create new settlement\n<color #FF0000><b>Error code:</b> 2001</color>
    activate SETTLE_DAO
    SETTLE_DAO -> DB: Insert new settlement
    activate DB
    deactivate SETTLE_DAO
    hnote over DB #LightYellow
        INSERT INTO **settlement**
            reason
            VALUES (payload.reason)
    end hnote
    deactivate DB

    SSAPI-> SETTLE_DAO: Request settlementWindow(s)\n<color #FF0000><b>Error code:</b> 2001</color>
    activate SETTLE_DAO
    SETTLE_DAO -> DB: Retrieve settlementWindow(s)
    activate DB
    hnote over DB #LightYellow
        SELECT MAX(settlementWindowStateChangeId), settlementWindowStateId, reason
        FROM  **settlementWindowStateChange**
        WHERE settlementWindowId = payload./settlementWindow/{id}
        GROUP BY settlementWindowStateId,settlementWindowId, reason;
    end hnote
    deactivate DB
    SSAPI <-- SETTLE_DAO: Return results
    deactivate SETTLE_DAO

    alt Settlement Windows found
        break
            group Validate the list of settlement windows
                note right of SSAPI #LightGray
                    allSettlementWindowsClosed = true
                end note
                loop
                    SSAPI --> SSAPI: if settlementWindowStateId != 'CLOSED' \nthen allSettlementWindowsClosed = false
                end loop
            end
            note right of SSAPI #yellow
                {
                    "status": 0, <color #FF0000>**?**</color>
                    "code": <integer>,
                    "message": "Invalid payload or state"
                }
                <color #FF0000>**OR**</color> what is used in 6.2.5.:
                {
                    errorInformation: {
                        "errorCode": <integer>,
                        "errorDescription": "Invalid payload or state"
                    }
                }
            end note
            OPERATOR <-- SSAPI: Respond HTTP - <color #FF0000>400 (Bad Request)</color>
        end
        SSAPI ->SETTLE_DAO: Request 'CLOSE' & 'OPEN' of Settlement Windows\n<color #FF0000><b>Error code:</b> 2001</color>
        activate SETTLE_DAO
        group <color #blue>DB TRANSACTION</color>
            SETTLE_DAO -> DB: Insert the list of settlementWindows
            activate DB
            hnote over DB #LightYellow
                INSERT INTO **settlementSettlementWindow**
                	(settlementId, settlementWindowId)
                    VALUE(payload.settlementId, payload./settlementWindow/{id});
            end hnote
            deactivate DB
            SETTLE_DAO -> DB: Populate settlementTransferParticipant with aggregated data
            activate DB
            hnote over DB #LightYellow
                INSERT INTO **settlementTransferParticipant**
                    (settlementId, participantCurrencyId, transferParticipantRoleTypeId,
                    ledgerEntryTypeId, amount, createdDate)
                SELECT payload.settlementId AS settlementId, tp.participantCurrencyId,
                    tp.transferParticipantRoleTypeId, tp.ledgerEntryTypeId,
                    SUM(tp.amount) AS amount, CURDATE() AS createdDate
                FROM **transferFulfilment** AS tf
                JOIN **transferStateChange** AS tsc
                    ON tsc.transferId = tf.transferId AND tsc.transferStateId = ‘COMMITTED’
                JOIN **transferParticipant** AS tp
                    ON tp.transferId = tf.transferId
                WHERE tf.settlementWindowId
                    IN (SELECT settlementWindowId
                    FROM **settlementSettlementWindow**
                    WHERE settlementId = payload.settlementId)
                    GROUP BY tp.participantCurrencyId, tp.transferParticipantRoleTypeId,
                        tp.ledgerEntryTypeId
            end hnote
            deactivate DB
            SETTLE_DAO -> DB: Populate settlementParticipantCurrency with aggregated data
            activate DB
            hnote over DB #LightYellow
                INSERT INTO **settlementParticipantCurrency**
                    (settlementId, participantCurrencyId, netAmount)
                SELECT settlementId, participantCurrencyId,
                SUM(CASE
                     WHEN stp.transferParticipantRoleTypeId = 1 AND stp.ledgerEntryTypeId = 1 THEN amount
                     WHEN stp.transferParticipantRoleTypeId = 2 AND stp.ledgerEntryTypeId = 1 THEN -amount
                     WHEN stp.ledgerEntryTypeId = 2 THEN -amount
                   END )
                FROM **settlementTransferParticipant** AS stp
                WHERE settlementId = payload.settlementId
                GROUP BY settlementId, participantCurrencyId
            end hnote
            deactivate DB
            SETTLE_DAO -> DB: Insert initial state change 'PENDING_SETTLEMENT'
            activate DB
            hnote over DB #LightYellow
                INSERT INTO **settlementParticipantCurrencyStateChange**
                    (settlementParticipantCurrencyId, settlementStateId, reason)
                SELECT settlementParticipantCurrencyId, ‘PENDING_SETTLEMENT’, payload.reason
                FROM **settlementParticipantCurrency**
                WHERE settlementId = payload.settlementId
            end hnote
            deactivate DB
            SETTLE_DAO -> DB: Insert initial state for settlement 'PENDING_SETTLEMENT'
            activate DB
            hnote over DB #LightYellow
                INSERT INTO **settlementStateChange**
                    (settlementId, settlementStateId, reason)
                SELECT settlementId, ‘PENDING_SETTLEMENT’, payload.reason
                FROM **settlementParticipantCurrency**
                WHERE settlementId = payload.settlementId
            end hnote
            deactivate DB
            SETTLE_DAO -> DB: Insert new state for settlementWindow 'PENDING_SETTLEMENT'
            activate DB
            hnote over DB #LightYellow
                INSERT INTO **settlementWindowStateChange**
                    (settlementWindowId, settlementWindowStateId, reason)
                VALUE payload./settlementWindow/{id}, 'PENDING_SETTLEMENT', payload.reason
            end hnote
            deactivate DB
        end
        SSAPI <-- SETTLE_DAO: Results for participant netAmount per ledger for closed settlement window
        deactivate SETTLE_DAO
        note left of SSAPI #Yellow
            {
              "id": "string",
              "reason": "string",
              "state": "PENDING_SETTLEMENT",
              "netSettlementAmount": {
                "amount": 0,
                "currency": "string"
              }
            }
        end note
        OPERATOR <-- SSAPI: Respond HTTP - <color #FF0000>200 (OK)</color>
    else Settlement Windows not found
        note right of SSAPI #lightgray
            Log ERROR event
        end note
        note left of SSAPI #yellow
            {
                "status": 0,
                "code": <integer>,
                "message": <string>
            }
        end note
        OPERATOR <-- SSAPI: Respond HTTP - <color #FF0000>4xx (Client error)</color>
        deactivate SSAPI
        deactivate OPERATOR
    end
end
@enduml
