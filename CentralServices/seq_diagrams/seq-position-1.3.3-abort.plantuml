@startuml
' declate title
title 1.3.3 Abort Position Handler Consume

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistence Store

' declare actors
control "Position Handler" as POS_HANDLER
collections "Transfer-Topic" as TOPIC_TRANSFERS
entity "Position DAO" as POS_DAO
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
' entity "Participant DAO" as PARTICIPANT_DAO
entity "Transfer DAO" as TRANS_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant POS_HANDLER
    participant TOPIC_TRANSFERS
    participant TOPIC_NOTIFICATIONS
    participant POS_DAO
    ' participant PARTICIPANT_DAO
    participant TRANS_DAO
    participant DB
end box

' start flow
activate POS_HANDLER
group Abort Position Handler Consume
   alt Calculate & Validate Latest Position Abort (success)
        opt type == 'position' && action == 'timeout-received'
            POS_HANDLER -> POS_DAO: Request current state of transfer from DB
            activate POS_DAO
            POS_DAO -> DB: Retrieve current state of transfer from DB
            activate DB
            hnote over DB #lightyellow
                transferStateChange
            end note
            DB --> POS_DAO: Return current state of transfer from DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return current state of transfer from DB
            deactivate POS_DAO
            POS_HANDLER <-> POS_HANDLER: Validate current state (transferStateChange.transferStateId == 'EXPIRED')

            group Calculate position and persist change
                POS_HANDLER -> POS_DAO: Request latest position from DB for Payer
                activate POS_DAO
                POS_DAO -> DB: Retrieve latest position from DB for Payer
                activate DB
                hnote over DB #lightyellow
                    participant
                    participantPosition
                end note
                DB --> POS_DAO: Retrieve latest position from DB for Payer
                deactivate DB
                POS_DAO --> POS_HANDLER: Return latest position
                deactivate POS_DAO
                POS_HANDLER <-> POS_HANDLER: Calculate latest position ($latestPosition = participantPosition.reservedAmount - payload.amount.amount)
                POS_HANDLER -> POS_DAO: Request to persist latest position for Payer
                activate POS_DAO
                POS_DAO -> DB: Persist latest position to DB for Payer
                hnote over DB #lightyellow
                    participantPosition
                end note
                activate DB
                deactivate DB
                POS_DAO --> POS_HANDLER: Return success
                deactivate POS_DAO
            end

            group Persist Transfer State (with transferState='ABORTED' on position check pass)
                POS_HANDLER -> TRANS_DAO: Request to persist transfer
                activate TRANS_DAO
                TRANS_DAO -> DB: Persist transfer state
                hnote over DB #lightyellow
                    transferStateChange
                end note
                activate DB
                deactivate DB
                TRANS_DAO --> POS_HANDLER: Return success
                deactivate TRANS_DAO
            end
            note right of POS_HANDLER #yellow
                Message: {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payeeFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: {
                             "errorInformation": {
                                 "errorCode": 4001,
                                 "errorDescription": "Payer FSP insufficient liquidity",
                                 "extensionList": <transferMessage.extensionList>
                             }
                         }
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: transfer,
                            action: abort,
                            createdAt: <timestamp>,
                            state: {
                                status: 'error',
                                code: <errorInformation.errorCode>
                                description: <errorInformation.errorDescription>
                            }
                        }
                    }
                }
            end note
        end
        opt type == 'position' && action == 'timeout-reserved'
            POS_HANDLER -> POS_DAO: Request current state of transfer from DB
            activate POS_DAO
            POS_DAO -> DB: Retrieve current state of transfer from DB
            activate DB
            hnote over DB #lightyellow
                transferStateChange
            end note
            DB --> POS_DAO: Return current state of transfer from DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return current state of transfer from DB
            deactivate POS_DAO
            POS_HANDLER <-> POS_HANDLER: Validate current state (transferStateChange.transferStateId == 'EXPIRED')

            group Calculate position and persist change
                POS_HANDLER -> POS_DAO: Request latest position from DB for Payer
                activate POS_DAO
                POS_DAO -> DB: Retrieve latest position from DB for Payee
                activate DB
                hnote over DB #lightyellow
                    participant
                    participantPosition
                end note
                DB --> POS_DAO: Retrieve latest position from DB for Payer
                deactivate DB
                POS_DAO --> POS_HANDLER: Return latest position
                deactivate POS_DAO
                POS_HANDLER <-> POS_HANDLER: Calculate latest position ($latestPosition = participantPosition.reservedAmount - payload.amount.amount)
                POS_HANDLER -> POS_DAO: Request to persist latest position for Payer
                activate POS_DAO
                POS_DAO -> DB: Persist latest position to DB for Payer
                hnote over DB #lightyellow
                    participantPosition
                end note
                activate DB
                deactivate DB
                POS_DAO --> POS_HANDLER: Return success
                deactivate POS_DAO
            end
            group Persist Transfer State (with transferState='ABORTED' on position check pass)
                POS_HANDLER -> TRANS_DAO: Request to persist transfer
                activate TRANS_DAO
                TRANS_DAO -> DB: Persist transfer state
                hnote over DB #lightyellow
                    transferStateChange
                end note
                activate DB
                deactivate DB
                TRANS_DAO --> POS_HANDLER: Return success
                deactivate TRANS_DAO
            end
            note right of POS_HANDLER #yellow
                Message: {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payeeFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: {
                            "errorInformation": {
                                "errorCode": 4001,
                                "errorDescription": "Payer FSP insufficient liquidity",
                                "extensionList": <transferMessage.extensionList>
                            }
                        }
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: transfer,
                            action: abort,
                            createdAt: <timestamp>,
                            state: {
                                status: 'error',
                                code: <errorInformation.errorCode>
                                description: <errorInformation.errorDescription>
                            }
                        }
                    }
                }
            end note
        end
        opt type == 'position' && action == 'reject'
            POS_HANDLER -> POS_DAO: Request current state of transfer from DB
            activate POS_DAO
            POS_DAO -> DB: Retrieve current state of transfer from DB
            activate DB
            hnote over DB #lightyellow
                transferStateChange
            end note
            DB --> POS_DAO: Return current state of transfer from DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return current state of transfer from DB
            deactivate POS_DAO
            POS_HANDLER <-> POS_HANDLER: Validate current state (transferStateChange.transferStateId == 'REJECTED')

            group Calculate position and persist change
                POS_HANDLER -> POS_DAO: Request latest position from DB for Payer
                activate POS_DAO
                POS_DAO -> DB: Retrieve latest position from DB for Payer
                activate DB
                hnote over DB #lightyellow
                    participant
                    participantPosition
                end note
                DB --> POS_DAO: Retrieve latest position from DB for Payer
                deactivate DB
                POS_DAO --> POS_HANDLER: Return latest position
                deactivate POS_DAO
                POS_HANDLER <-> POS_HANDLER: Calculate latest position ($latestPosition = participantPosition.reservedAmount - payload.amount.amount)
                POS_HANDLER -> POS_DAO: Request to persist latest position for Payer
                activate POS_DAO
                POS_DAO -> DB: Persist latest position to DB for Payer
                hnote over DB #lightyellow
                    participantPosition
                end note
                activate DB
                deactivate DB
                POS_DAO --> POS_HANDLER: Return success
                deactivate POS_DAO
            end

            group Persist Transfer State (with transferState='ABORTED' on position check pass)
                POS_HANDLER -> TRANS_DAO: Request to persist transfer
                activate TRANS_DAO
                TRANS_DAO -> DB: Persist transfer state
                hnote over DB #lightyellow
                    transferStateChange
                end note
                activate DB
                deactivate DB
                TRANS_DAO --> POS_HANDLER: Return success
                deactivate TRANS_DAO
            end
            note right of POS_HANDLER #yellow
                Message: {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payeeFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: transfer,
                            action: abort,
                            createdAt: <timestamp>,
                            state: {
                                status: "rejected",
                                code: 0
                            }
                        }
                    }
                }
            end note
        end
        ' We do not see how this scenario will be triggered
        opt type == 'position' && action == 'failed' (Unable to currently trigger this scenario)
            POS_HANDLER -> POS_DAO: Request current state of transfer from DB
            activate POS_DAO
            POS_DAO -> DB: Retrieve current state of transfer from DB
            activate DB
            hnote over DB #lightyellow
                transferStateChange
            end note
            DB --> POS_DAO: Return current state of transfer from DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return current state of transfer from DB
            deactivate POS_DAO
            POS_HANDLER <-> POS_HANDLER: Validate current state (transferStateChange.transferStateId == 'FAILED')

            group Calculate position and persist change
                POS_HANDLER -> POS_DAO: Request latest position from DB for Payer
                activate POS_DAO
                POS_DAO -> DB: Retrieve latest position from DB for Payer
                activate DB
                hnote over DB #lightyellow
                    participant
                    participantPosition
                end note
                DB --> POS_DAO: Retrieve latest position from DB for Payer
                deactivate DB
                POS_DAO --> POS_HANDLER: Return latest position
                deactivate POS_DAO
                POS_HANDLER <-> POS_HANDLER: Calculate latest position ($latestPosition = participantPosition.reservedAmount - payload.amount.amount)
                POS_HANDLER -> POS_DAO: Request to persist latest position for Payer
                activate POS_DAO
                POS_DAO -> DB: Persist latest position to DB for Payer
                hnote over DB #lightyellow
                    participantPosition
                end note
                activate DB
                deactivate DB
                POS_DAO --> POS_HANDLER: Return success
                deactivate POS_DAO
            end

            group Persist Transfer State (with transferState='ABORTED' on position check pass)
                POS_HANDLER -> TRANS_DAO: Request to persist transfer
                activate TRANS_DAO
                TRANS_DAO -> DB: Persist transfer state
                hnote over DB #lightyellow
                    transferStateChange
                end note
                activate DB
                deactivate DB
                TRANS_DAO --> POS_HANDLER: Return success
                deactivate TRANS_DAO
            end
            note right of POS_HANDLER #yellow
                Message: {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payeeFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: transfer,
                            action: abort,
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0
                            }
                        }
                    }
                }
            end note
        end
        POS_HANDLER -> TOPIC_TRANSFERS: Publish Transfer event
        activate TOPIC_TRANSFERS
        deactivate TOPIC_TRANSFERS
   else Calculate & Validate Latest Position Abort (failure)
        opt type == 'position' && action == 'timeout-received'
            POS_HANDLER -> POS_DAO: Request current state of transfer from DB
            activate POS_DAO
            POS_DAO -> DB: Retrieve current state of transfer from DB
            activate DB
            hnote over DB #lightyellow
                transferStateChange
            end note
            DB --> POS_DAO: Return current state of transfer from DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return current state of transfer from DB
            deactivate POS_DAO
            POS_HANDLER <-> POS_HANDLER: Validate current state (transferStateChange.transferStateId == 'EXPIRED')
            note right of POS_HANDLER #red: Validation failure!

            note right of POS_HANDLER #yellow
                Message:
                {
                    id: <transferMessage.transferId>
                    from: <ledgerName>,
                    to: <transferMessage.payerFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: {
                            "errorInformation": {
                                "errorCode": 4001,
                                "errorDescription": "Unable to abort transfer in this state",
                                "extensionList": <transferMessage.extensionList>
                        }
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: notification,
                            action: prepare,
                            createdAt: <timestamp>,
                            state: {
                                status: 'error',
                                code: <errorInformation.errorCode>
                                description: <errorInformation.errorDescription>
                            }
                        }
                    }
                }
            end note
            POS_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notification (failure) event for Payer
            activate TOPIC_NOTIFICATIONS
            deactivate TOPIC_NOTIFICATIONS
        end
        opt type == 'position' && action == 'timeout-reserved'
            POS_HANDLER -> POS_DAO: Request current state of transfer from DB
            activate POS_DAO
            POS_DAO -> DB: Retrieve current state of transfer from DB
            activate DB
            hnote over DB #lightyellow
                transferStateChange
            end note
            DB --> POS_DAO: Return current state of transfer from DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return current state of transfer from DB
            deactivate POS_DAO
            POS_HANDLER <-> POS_HANDLER: Validate current state (transferStateChange.transferStateId == 'EXPIRED')
            note right of POS_HANDLER #red: Validation failure!

            note right of POS_HANDLER #yellow
                Message:
                {
                    id: <transferMessage.transferId>
                    from: <ledgerName>,
                    to: <transferMessage.payerFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: {
                            "errorInformation": {
                                "errorCode": 4001,
                                "errorDescription": "Unable to abort transfer in this state",
                                "extensionList": <transferMessage.extensionList>
                        }
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: notification,
                            action: prepare,
                            createdAt: <timestamp>,
                            state: {
                                status: 'error',
                                code: <errorInformation.errorCode>
                                description: <errorInformation.errorDescription>
                            }
                        }
                    }
                }
            end note
            POS_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notification (failure) event for Payee
            activate TOPIC_NOTIFICATIONS
            deactivate TOPIC_NOTIFICATIONS
        end
        opt type == 'position' && action == 'reject'
            POS_HANDLER -> POS_DAO: Request current state of transfer from DB
            activate POS_DAO
            POS_DAO -> DB: Retrieve current state of transfer from DB
            activate DB
            hnote over DB #lightyellow
                transferStateChange
            end note
            DB --> POS_DAO: Return current state of transfer from DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return current state of transfer from DB
            deactivate POS_DAO
            POS_HANDLER <-> POS_HANDLER: Validate current state (transferStateChange.transferStateId == 'REJECTED')
            note right of POS_HANDLER #red: Validation failure!
            note right of POS_HANDLER #yellow
                Message:
                {
                    id: <transferMessage.transferId>
                    from: <ledgerName>,
                    to: <transferMessage.payerFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: {
                            "errorInformation": {
                                "errorCode": 4001,
                                "errorDescription": "Unable to abort transfer in this state",
                                "extensionList": <transferMessage.extensionList>
                        }
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: notification,
                            action: prepare,
                            createdAt: <timestamp>,
                            state: {
                                status: 'error',
                                code: <errorInformation.errorCode>
                                description: <errorInformation.errorDescription>
                            }
                        }
                    }
                }
            end note
            POS_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notification (failure) event for Payee
            activate TOPIC_NOTIFICATIONS
            deactivate TOPIC_NOTIFICATIONS
        end
        opt type == 'position' && action == 'failed'
            POS_HANDLER -> POS_DAO: Request current state of transfer from DB
            activate POS_DAO
            POS_DAO -> DB: Retrieve current state of transfer from DB
            activate DB
            hnote over DB #lightyellow
                transferStateChange
            end note
            DB --> POS_DAO: Return current state of transfer from DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return current state of transfer from DB
            deactivate POS_DAO
            POS_HANDLER <-> POS_HANDLER: Validate current state (transferStateChange.transferStateId == 'FAILED')
            note right of POS_HANDLER #red: Validation failure!
            note right of POS_HANDLER #yellow
                Message:
                {
                    id: <transferMessage.transferId>
                    from: <ledgerName>,
                    to: <transferMessage.payerFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: {
                            "errorInformation": {
                                "errorCode": 4001,
                                "errorDescription": "Unable to abort transfer in this state",
                                "extensionList": <transferMessage.extensionList>
                        }
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: notification,
                            action: prepare,
                            createdAt: <timestamp>,
                            state: {
                                status: 'error',
                                code: <errorInformation.errorCode>
                                description: <errorInformation.errorDescription>
                            }
                        }
                    }
                }
            end note
            POS_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notification (failure) event for Payer
            activate TOPIC_NOTIFICATIONS
            deactivate TOPIC_NOTIFICATIONS
        end

   end
end
deactivate POS_HANDLER
@enduml
