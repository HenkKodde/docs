@startuml
' declate title
title 6.2.5. updateSettlementById PUT: /updateSettlementById
autonumber

' Actor Keys:

' declare actors

actor "Hub Employee" as OPERATOR

boundary "Settlement Service API" as SSAPI
control "Settlement" as SETTLEMENT
'control "Settlement Window" as SETTLEWINDOW
entity "Settlement DAO" as SETTLE_DAO

database "Central Store" as DB

box "Central HUB" #LightPink
    participant OPERATOR
end box

box "Settlement Service" #LightGreen
    participant SSAPI
    participant SETTLEMENT
'    participant SETTLEWINDOW
    participant SETTLE_DAO
end box

box "Central Services" #LightYellow
    participant DB
end box

' start flow
group Acknowledgement of settlement
    activate OPERATOR
    note right of OPERATOR #Yellow
        {
          "accounts": [
            {
              "id": 0,
              "reason": "motivation for closure",
              "state": "closed."
            }
          ]
        }
    end note
    OPERATOR -> SSAPI:         PUT - /settlement/{id}
    deactivate OPERATOR
    activate SSAPI

    SSAPI -> SETTLEMENT: Update settlement
    deactivate SSAPI
    activate SETTLEMENT

    SETTLEMENT -> SETTLE_DAO: Update settlement
    deactivate SETTLEMENT
    activate SETTLE_DAO

    SETTLE_DAO -> DB: Lookup settlement and state \n<color #FF0000><b>Error code:</b> 2001</color>
    activate DB
    hnote over DB #LightYellow
        settlement
        settlementStateChange
    end hnote

    SETTLE_DAO <-- DB: Return Settlement
    deactivate DB
    break verify settlement exist & settlement_state
        group Validate settlement exist & state
            note right of SETTLE_DAO #LightGray
               settlementState != 'SETTLED'
            end note
        end
    end

    SETTLE_DAO -> DB: Retrieve list of requested account(s) \n<color #FF0000><b>Error code:</b> 2001</color>
    activate DB
    hnote over DB #LightYellow
        settlementParticipantCurrency
        settlementParticipantCurrencyStateChange
    end hnote
    DB --> SETTLE_DAO: Return list
    deactivate DB

    break
        group Validate list of accounts (participantCurrencyId)
            note right of SETTLE_DAO #LightGray
                validList = true
            end note
            loop
                SETTLE_DAO <-> SETTLE_DAO: if participantCurrencyState != 'NOT_SETTLED' \nthen validList = false
            end loop
        end
    end
    group <color #blue>DB TRANSACTION</color>
    SETTLE_DAO -> DB: Update participant account state
        hnote over DB #LightYellow
            INSERT INTO **settlementParticipantCurrencyStateChange**
            SELECT settlementParticipantCurrencyId, payload.state, payload.reason
            FROM settlementParticipantCurrency
            WHERE settlementId = payload.settlementId
        end hnote

'            SETTLE_DAO -> DB: Update settlement state
'            hnote over DB #LightYellow
'                INSERT INTO **settlementStateChange**
'                SELECT settlementId, payload.state, payload.reason
'                FROM settlementParticipantCurrency
'                WHERE settlementId = payload.settlementId
'            end hnote

'            SETTLE_DAO -> DB: Update state for settlementWindow
'            hnote over DB #LightYellow
'                INSERT INTO **settlementWindowStateChange**
'                SELECT settlementId, 'SETTLED', payload.reason
'                FROM settlementParticipantCurrency
'                WHERE settlementId = payload.settlementId
'            end hnote
'            note over DB #LightGray
'                SettlementWindowState is implied and need to verify if this update is appropiate.
'            end note
        end
        SETTLE_DAO -> DB: Obtain list of Participants and settlementWindows
        activate DB
        hnote over DB #LightYellow
            SELECT pc.participantId 
            FROM settlementParticipantCurrency AS spc 
            JOIN participantCurrency AS pc ON
                pc.participantCurrencyId = spc.participantCurrencyId 
            WHERE spc.settlementId = payload.settlement<id> 
                AND pc.participantCurrencyId = payload.account<id>
            GROUP BY participantCurrency.participantId
        end hnote
        note over DB #LightGray
            Response back includes the Participant, settlementWindow and settlementWindowState
            for the specified Account(s) updated.
        end note
        SETTLE_DAO <-- DB: Return list of Participants and settlementWindows for account(s) updated
        deactivate DB
        SETTLEMENT <- SETTLE_DAO: Status update successful
        activate SETTLEMENT
        SETTLEMENT -> SSAPI: Status update successful
        deactivate SETTLEMENT
        activate SSAPI
        note left of SSAPI #LightYellow
        [
          {
            "Id": 0,
            "State": "string",
            "settlementWindows": [
              [
                {
                  "id": 0,
                  "reason": "string",
                  "state": "string",
                  "createdDate": "string",
                }
              ]
            ],
            "Participants": [
              {
                "id": 0,
                "accounts": [
                  {
                    "id": "string",
                    "reason": "string",
                    "state": "SETTLED",
                    "netSettlementAmount": {
                      "amount": 0,
                      "currency": "string"
                    }
                  }
                ]
              }
            ]
          }
        ]
        end note
        SSAPI -> OPERATOR: Status update successful
        deactivate SSAPI
'        else <color #FF0000><b>Settlement Update Error</b></color>
'            SETTLE_DAO -> SSAPI: Settlement Update Error - Return ERROR

'    else <color #FF0000><b>Settlement Window Update Error</b></color>
'        SETTLE_DAO -> SSAPI: Settlement Window Update Error - Return ERROR
'        deactivate SETTLE_DAO
'        activate SSAPI
'        SSAPI -> SSAPI: Update Event log
'        note right of SSAPI #LightBlue
'            Log ERROR Messages.
'            Update Event log with ERROR.
'        end note
'        note left of SSAPI #Yellow
'            {
'              "status": 0,
'              "code": "(ERROR response code eg. '404' - Defined in swagger definition))",
'              "message": "string"
'            }
'        end note
'        OPERATOR <- SSAPI: Return ERROR
        deactivate SSAPI
end

@enduml