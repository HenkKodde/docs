@startuml
' declate title
title 6.2.5. Acknowledgement of Settlement Transfer
autonumber

' declare actors
actor "Hub Employee" as OPERATOR
boundary "Settlement Service API" as SSAPI
entity "Settlement DAO" as SETTLE_DAO
database "Central Store" as DB

box "Central HUB" #lightpink
    participant OPERATOR
end box

box "Settlement Service" #lightgreen
    participant SSAPI
    participant SETTLE_DAO
end box

box "Central Services" #lightyellow
    participant DB
end box

' start flow
group Acknowledgement of Settlement Transfer
    activate OPERATOR
    note right of OPERATOR #yellow
        {
            "participants": [
                {
                    "id": 1
                    "accounts" : [
                        {
                            "id": 1,
                            "reason": "string",
                            "state": "PENDING_SETTLEMENT"
                        },
                        {
                            "id": 2,
                            "reason": "string",
                            "state": "SETTLED"
                        }
                    ]
                },
                {
                    "id": 2
                    "accounts" : [
                        {
                            "id": 3,
                            "reason": "string",
                            "state": "NOT_SETTLED"
                        }
                    ]
                }
            ]
        }
    end note
    
    note right of OPERATOR #lightgray
        In the sequence below we refer to:
        - participants[N].id AS participantId
        - accounts[N].id AS participantCurrencyId
    end note

    OPERATOR -> SSAPI: PUT - /settlement/{id}
    activate SSAPI
    SSAPI -> SETTLE_DAO: Lookup settlement
    activate SETTLE_DAO
    SETTLE_DAO -> DB: Lookup settlement and settlement state\n<color #FF0000><b>Error code:</b> 2001</color>
    activate DB
    hnote over DB #lightyellow
        settlement
        settlementStateChange
    end hnote
    SETTLE_DAO <-- DB: Return data
    deactivate DB
    SSAPI <-- SETTLE_DAO: Return data
    deactivate SETTLE_DAO

    alt settlementStateChange == 'PENDING_SETTLEMENT'
        SSAPI -> SSAPI: Create **participantIdList** from request

        SSAPI -> SETTLE_DAO: Retrive participant details and state for participantIdList
        activate SETTLE_DAO
        SETTLE_DAO -> DB: Select from DB\n<color #FF0000><b>Error code:</b> 2001</color>
        activate DB
        hnote over DB #lightyellow
            SELECT pc.participantId, spc.participantCurrencyId, spcsc.settlementStateId, 
                spc.settlementParticipantCurrencyId, spc.netAmount, pc.currencyId
            FROM **participantCurrency** pc
            JOIN **settlementParticipantCurrency** spc
            ON spc.participantCurrencyId = pc.participantCurrencyId
            JOIN (SELECT spc.settlementParticipantCurrencyId, 
                        MAX(settlementParticipantCurrencyStateChangeId) AS
                        maxSettlementParticipantCurrencyStateChangeId
                FROM **settlementParticipantCurrencyStateChange** spcsc
                JOIN **settlementParticipantCurrency** spc
                ON spc.settlementParticipantCurrencyId = spcsc.settlementParticipantCurrencyId
                JOIN **participantCurrency** pc
                ON pc.participantCurrencyId = spc.participantCurrencyId
                WHERE spc.settlementId = {id}
                AND pc.participantId IN {participantIdList}) AS mx
            ON mx.settlementParticipantCurrencyId = spc.settlementParticipantCurrencyId
            JOIN **settlementParticipantCurrencyStateChange** spcsc
            ON spcsc.settlementParticipantCurrencyStateChangeId = 
               mx.maxSettlementParticipantCurrencyStateChangeId
            WHERE spc.settlementId = {id}
            AND pc.participantId IN {participantIdList}
        end hnote
        SETTLE_DAO <-- DB: Return data
        deactivate DB
        SSAPI <-- SETTLE_DAO: Return spcStateChangeList
        deactivate SETTLE_DAO

        SSAPI -> SSAPI: participantList = []\nsettlementParticipantCurrencyIdList = []
        loop payload.participants as participant
            SSAPI -> SSAPI: participantList.push({participantId: participant.participantId, accounts: []})
            loop participant.accounts as account
                SSAPI -> SSAPI: accountIsFound = false
                loop spcStateChangeList as record
                    alt participant.participantId == record.participantId\nand account.participantCurrencyId == record.participantCurrencyId
                        SSAPI -> SSAPI: accountIsFound = true
                        alt record.settlementStateId == 'PENDING_SETTLEMENT'
                            SSAPI -> SSAPI: settlementParticipantCurrencyIdList.push({\n    participantCurrencyId: record.settlementParticipantCurrencyId,\n    reason: 'string'\n})
                            SSAPI -> SSAPI: participantList[participantList.length-1].accounts\n.push({\n    participantCurrencyId: account.participantCurrencyId,\n    reason: 'string',\n    state: 'SETTLED',\n    netSettlementAmount: {\n        amount: record.netAmount\n        currency: record.currencyId\n    }\n})
                        else record.settlementStateId == 'SETTLED'
                            SSAPI -> SSAPI: participantList[participantList.length-1].accounts\n.push({\n    participantCurrencyId: account.participantCurrencyId,\n    errorInformation: {\n        errorCode: 'code',\n        errorDescription: 'Already settled'\n    }\n})
                        end
                        |||
                    end
                    |||
                end
                opt accountIsFound == false
                    SSAPI -> SSAPI: participantList[participantList.length-1].accounts\n.push({\n    participantCurrencyId: account.participantCurrencyId,\n    errorInformation: {\n        errorCode: 'code',\n        errorDescription: 'Account not found'\n    }\n})
                end
                |||
            end
        end
        group <color #blue>DB TRANSACTION</color>
            loop settlementParticipantCurrencyIdList as record
                SSAPI -> SETTLE_DAO: Change settlement participant currency state
                activate SETTLE_DAO
                SETTLE_DAO -> DB: Insert new state 'SETTLED' and record.reason\n<color #FF0000><b>Error code:</b> 2001</color>
                activate DB
                hnote over DB #lightyellow
                    settlementParticipantCurrencyStateChange
                end hnote
                deactivate DB
                deactivate SETTLE_DAO
            end
        end

        SSAPI -> SETTLE_DAO: Get list of settlementWindows and participantCurrencies
        activate SETTLE_DAO
        SETTLE_DAO -> DB: Retrive list\n<color #FF0000><b>Error code:</b> 2001</color>
        activate DB
        hnote over DB #lightyellow
            SELECT ssw.settlementWindowId, tp.participantCurrencyId
            FROM **settlementSettlementWindow** ssw
            JOIN **transferFulfilment** tf
            ON tf.settlementWindowId = ssw.settlementWindowId
            JOIN **transferParticipant** tp
            ON tp.transferId = tf.transferId
            WHERE settlementId = {id}
            GROUP BY ssw.settlementWindowId, tp.participantCurrencyId
        end hnote
        SETTLE_DAO <-- DB: Return list
        deactivate DB
        SSAPI <-- SETTLE_DAO: Return **settlementWindowsParticipantCurrencyList**
        deactivate SETTLE_DAO

        SSAPI -> SETTLE_DAO: Get list of all NOT_SETTELED or PENDING_SETTLEMENT\nparticipantCurrencies in settlement
        activate SETTLE_DAO
        SETTLE_DAO -> DB: Retrive list\n<color #FF0000><b>Error code:</b> 2001</color>
        activate DB
        hnote over DB #lightyellow
            SELECT spc.participantCurrencyId
            FROM **settlementParticipantCurrency** spc
            JOIN (SELECT spc.settlementParticipantCurrencyId, 
                         MAX(settlementParticipantCurrencyStateChangeId) AS
                         maxSettlementParticipantCurrencyStateChangeId
                  FROM **settlementParticipantCurrencyStateChange** spcsc
                  JOIN **settlementParticipantCurrency** spc
                  ON spc.settlementParticipantCurrencyId = spcsc.settlementParticipantCurrencyId
                  WHERE spc.settlementId = {id}) AS mx
            ON mx.settlementParticipantCurrencyId = spc.settlementParticipantCurrencyId
            JOIN **settlementParticipantCurrencyStateChange** spcsc
            ON spcsc.settlementParticipantCurrencyStateChangeId = 
               mx.maxSettlementParticipantCurrencyStateChangeId
            WHERE spc.settlementId = {id}
            AND spcsc.settlementStateId != 'SETTLED'
        end hnote
        SETTLE_DAO <-- DB: Return list
        deactivate DB
        SSAPI <-- SETTLE_DAO: Return **settlementParticipantCurrencyList**
        deactivate SETTLE_DAO

        group Settle settlementWindows
            SSAPI -> SSAPI: allWindowsList = []\nnotSettledWindowsList = []
            loop settlementWindowsParticipantCurrencyList as window
                opt window.settlementWindowId NOT IN allWindowsList
                    SSAPI -> SSAPI: allWindowsList.push(window.settlementWindowId)
                end
                loop settlementParticipantCurrencyList as pc
                    opt pc.participantCurrencyId == window.participantCurrencyId
                        SSAPI -> SSAPI: notSettledWindowsList.push(window.settlementWindowId)
                    end
                end
            end
            SSAPI -> SSAPI: settledWindowsList = _.difference(allWindowsList, notSettledWindowsList)

            group <color #blue>DB TRANSACTION</color>
                loop settledWindowsList as record
                    SSAPI -> SETTLE_DAO: Change settlement window state for record.settlementWindowId
                    activate SETTLE_DAO
                    SETTLE_DAO -> DB: Insert new state 'SETTLED'\n<color #FF0000><b>Error code:</b> 2001</color>
                    activate DB
                    hnote over DB #lightyellow
                        settlementWindowStateChange
                    end hnote
                    deactivate DB
                    deactivate SETTLE_DAO
                end
            end
        end

        ' construct settlementWindows
        ' check if all settlementWindows are SETTLED and if yes {
        '     SETTLE the settlement (update database)
        '     set settlement.state = SETTLED
        ' } else {get settlement state from database}
        ' return the result

    else settlementStateChange IN ['NOT_SETTLED', 'SETTLED']
        ' return {id, state}
        |||
    end

    note left of SSAPI #lightyellow
        [
          {
            "id": 0,
            "state": "string",
            "settlementWindows": [
              [
                {
                  "id": 0,
                  "reason": "string",
                  "state": "string",
                  "createdDate": "string",
                }
              ]
            ],
            "participants": [
              {
                "id": 0,
                "accounts": [
                  {
                    "id": 1,
                    "reason": "string",
                    "state": "SETTLED",
                    "netSettlementAmount": {
                      "amount": 0,
                      "currency": "string"
                    }
                  },
                  {
                    "id": 2,
                    "reason": "string",
                    "state": "SETTLED",
                    "netSettlementAmount": {
                      "amount": 0,
                      "currency": "string"
                    },
                    "errorInformation": {
                      "errorCode": 8001,
                      "errorDescription": "string"
                    }
                  }
                ]
              }
            ]
          }
        ]
    end note
    deactivate SSAPI
end
@enduml
