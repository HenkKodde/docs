@startuml
' declate title
title 6.2.5. Acknowledgement of Settlement Transfer
autonumber

' declare actors
actor "Hub Employee" as OPERATOR
boundary "Settlement Service API" as SSAPI
entity "Settlement DAO" as SETTLE_DAO
database "Central Store" as DB

box "Central HUB" #lightpink
    participant OPERATOR
end box

box "Settlement Service" #lightgreen
    participant SSAPI
    participant SETTLE_DAO
end box

box "Central Services" #lightyellow
    participant DB
end box

' start flow
group Acknowledgement of Settlement Transfer
    activate OPERATOR
    note right of OPERATOR #yellow
        {
            "participants": [
                {
                    "id": 1
                    "accounts" : [
                        {
                            "id": 1,
                            "state": "PENDING_SETTLEMENT",
                            "reason": <string>
                        },
                        {
                            "id": 2,
                            "state": "SETTLED",
                            "reason": <string>
                        }
                    ]
                },
                {
                    "id": 2
                    "accounts" : [
                        {
                            "id": 3,
                            "state": "NOT_SETTLED",
                            "reason": <string>
                        }
                    ]
                }
            ]
        }
    end note
    
    note right of OPERATOR #lightgray
        In the sequence diagram below:
        **participantId** is participants[N].id
        **participantCurrencyId** is accounts[N].id
    end note

    OPERATOR -> SSAPI: PUT - /settlement/{id}
    activate SSAPI
    SSAPI -> SETTLE_DAO: Retrive full information for settlement\n<color #FF0000><b>Error code:</b> 2001</color>
    activate SETTLE_DAO
    SETTLE_DAO -> DB: Select from DB
    activate DB
    hnote over DB #lightyellow
        SELECT s.settlementId, ssc.settlementStateId, ssc.reason, ssc.createdDate
        FROM **settlement** s
        LEFT JOIN **settlementStateChange** ssc
        ON ssc.settlementId = s.settlementId
        AND ssc.settelementStateChangeId = (
            SELECT MAX(ssc1.settelementStateChangeId)
            FROM **settlementStateChange** ssc1
            WHERE ssc1.settlementId = {id})
        WHERE s.settlementId = {id}
    end hnote
    SETTLE_DAO <-- DB: Return data
    deactivate DB
    SSAPI <-- SETTLE_DAO: Return **settlementData**
    deactivate SETTLE_DAO

    alt settlementStateChange == 'PENDING_SETTLEMENT'
        SSAPI -> SETTLE_DAO: Retrive full information for settlement accounts\n<color #FF0000><b>Error code:</b> 2001</color>
        activate SETTLE_DAO
        SETTLE_DAO -> DB: Select from DB
        activate DB
        hnote over DB #lightyellow
            SELECT pc.participantId, spc.participantCurrencyId, spcsc.settlementStateId, spcsc.reason,
                   spcsc.createdDate, spc.netAmount, pc.currencyId, spc.settlementParticipantCurrencyId AS <color #0000FF>key</color>
            FROM **settlementParticipantCurrency** spc
            JOIN (SELECT spcsc1.settlementParticipantCurrencyId, 
                         MAX(spcsc1.settlementParticipantCurrencyStateChangeId) AS
                         maxSettlementParticipantCurrencyStateChangeId
                  FROM **settlementParticipantCurrency** spc1
                  JOIN **settlementParticipantCurrencyStateChange** spcsc1
                  ON spcsc1.settlementParticipantCurrencyId = spc1.settlementParticipantCurrencyId
                  WHERE spc1.settlementId = {id}
                  GROUP BY spcsc1.settlementParticipantCurrencyId) spcs
            JOIN **settlementParticipantCurrencyStateChange** spcsc
            ON spcsc.settlementParticipantCurrencyStateChangeId =
               spcs.maxSettlementParticipantCurrencyStateChangeId
            JOIN **participantCurrency** pc
            ON pc.participantCurrencyId = spc.participantCurrencyId
            WHERE spc.settlementId = {id}
        end hnote
        SETTLE_DAO <-- DB: Return data
        deactivate DB
        SSAPI <-- SETTLE_DAO: Return **settlementAccountsList**
        deactivate SETTLE_DAO

        SSAPI -> SETTLE_DAO: Retrive full information for settlement windows\n<color #FF0000><b>Error code:</b> 2001</color>
        activate SETTLE_DAO
        SETTLE_DAO -> DB: Select from DB
        activate DB
        hnote over DB #lightyellow
            SELECT ssw.settlementWindowId, sswsc.settlementWindowStateId, sswsc.reason, sswsc.createdDate
            FROM **settlementSettlementWindow** ssw
            JOIN (SELECT sswsc1.settlementWindowId, MAX(sswsc1.settlementWindowStateChangeId) AS
                         maxSettlementWindowStateChangeId
                  FROM **settlementSettlementWindowStateChange** sswsc1
                  WHERE sswsc1.settlementWindowId IN (
                      SELECT ssw1.settlementWindowId
                      FROM **settlementSettlementWindow** ssw1
                      WHERE ssw1.settlementId = {id})
                  GROUP BY sswsc1.settlementWindowId) ssws
            ON ssws.settlementWindowId = ssw.settlementWindowId
            JOIN **settlementSettlementWindowStateChange** sswsc
            ON sswsc.settlementWindowStateChangeId = ssws.maxSettlementWindowStateChangeId
            WHERE ssw.settlementId = {id}
        end hnote
        SETTLE_DAO <-- DB: Return data
        deactivate DB
        SSAPI <-- SETTLE_DAO: Return **windowsList**
        deactivate SETTLE_DAO

        SSAPI -> SETTLE_DAO: Retrive full information for settlement windows accounts\n<color #FF0000><b>Error code:</b> 2001</color>
        activate SETTLE_DAO
        SETTLE_DAO -> DB: Select from DB
        activate DB
        hnote over DB #lightyellow
            SELECT ssw.settlementWindowId, tp.participantCurrencyId
            FROM **settlementSettlementWindow** ssw
            JOIN **transferFulfilment** tf
            ON tf.settlementWindowId = ssw.settlementWindowId
            JOIN **transferParticipant** tp
            ON tp.transferId = tf.transferId
            WHERE settlementId = {id}
            GROUP BY ssw.settlementWindowId, tp.participantCurrencyId
        end hnote
        SETTLE_DAO <-- DB: Return data
        deactivate DB
        SSAPI <-- SETTLE_DAO: Return **windowsAccountsList**
        deactivate SETTLE_DAO

        note right of SSAPI #lightgray
            Available raw datasets from DB:
            **settlementData** contains information about settlement and its current state/reason
            **settlementAccountsList** holds information about all accounts and their current state/reason
            **windowsList** has information about all windows and their current state/reason
            **windowsAccountsList** has information about all accounts and windows

            Local variables and objects:
            **settlementAccounts**: { // (derived from <color 0000FF>settlementAccountsList</color>)
                pendingSettlementCount: <integer>, // count of accounts in PENDING_SETTLEMENT state
                settledCount: <integer>, // count of accounts in SETTLED state
                notSettledCount: <integer> // count of accounts in NOT_SETTLED state
            }
            **allParticipants**: { // same as participants response object with initial data & key (derived from <color 0000FF>settlementAccountsList</color>)
                participantId_key: { // number used to access the object in array-like style
                    id: participantId,
                    accounts: {
                        participantCurrencyId_key: { // number used to access the object in array-like style
                            id: participantCurrencyId,
                            state: settlementStateId,
                            reason: reason,
                            createdDate: createdDate,
                            netSettlementAmount: {
                                amount: netAmount,
                                currency: currencyId
                            }
                        }
                    }
                }
            }
            **allAccounts**: { // same as previous but accessed by account id (derived from <color 0000FF>settlementAccountsList</color>)
                participantCurrencyId_key: { // number used to access the object in array-like style
                    id: participantCurrencyId,
                    state: settlementStateId,
                    reason: reason,
                    createdDate: createdDate,
                    netSettlementAmount: {
                        amount: netAmount,
                        currency: currencyId
                    },
                    participantId: participantId, // could be used to reconstruct allParticipants
                    key: <color 0000FF>key</color> // will be used to insert new state for settlementParticipantCurrency
                }
            }
            **allWindows**: { // same as settlementWindows response object with initial data (derived from <color 0000FF>windowsList</color>)
                settlementWindowId_key: { // number used to access the object in array-like style
                    id: settlementWindowId, // same as key value
                    state: settlementWindowStateId, 
                    reason: reason, 
                    createdDate: createdDate
                }
            }
            **windowsAccounts**: {
                settlementWindowId_key: { // number used to access the object in array-like style
                    id: settlementWindowId // same as key value
                    pendingSettlementAccounts: [], // array of accounts in PENDING_SETTLEMENT state
                    settledAccounts: [], // array of accounts in SETTLED state
                    notSettledAccounts: [] // array of accounts in NOT_SETTLED state
                }
            }
            **accountsWindows**: {
                participantCurrencyId_key: { // number used to access the object in array-like style
                    id: participantCurrencyId, // same as key value
                    windows: [] // array of windows to which the account settlement spans
                }
            }
            let **transactionTimestamp** = now()
        end note
        |||
        SSAPI -> SSAPI: <color FF0000>Acquire DB lock</color> on settlementParticipantCurrencyStateChange,\nsettlementWindowStateChange and settlementStateChange
        note right of SSAPI #lightgray
            let settlementAccounts = {
                pendingSettlementAccounts: 0,
                settledAccounts: 0,
                notSettledAccounts: 0,
            }
            let allParticipants = {} // declare sparse array
            let allAccounts = {} // declare sparse array
            let pid // participantId
            let aid // accountId (participantCurrencyId)
            let state
        end note
        loop settlementAccountsList as record
            note right of SSAPI #lightgray
                pid = record.participantId
                aid = record.participantCurrencyId
                state = record.settlementStateId

                allAccounts[aid] = {
                    id: aid,
                    state,
                    reason: record.reason,
                    createDate: record.createdDate,
                    netSettlementAmount: {
                        amount: record.netAmount,
                        currency: record.currencyId
                    },
                    key
                }
                allParticipants[pid] = allParticipants[pid] ? allParticipants[pid] : {id: pid, accounts: {}}
                allParticipants[pid].accounts[aid] = allAccounts[aid]
            end note
            alt state == 'PENDING_SETTLEMENT'
                note right of SSAPI #lightgray
                    settlementAccounts.pendingSettlementCount++
                end note
            else state == 'SETTLED'
                note right of SSAPI #lightgray
                    settlementAccounts.settledCount++
                end note
            else state == 'NOT_SETTLED'
                note right of SSAPI #lightgray
                    settlementAccounts.notSettledCount++
                end note
            end
        end 
        |||
        note right of SSAPI #lightgray
            let allWindows = {} // declare sparse array
            let wid // settlementWindowId
        end note
        loop windowsList as record
            note right of SSAPI #lightgray
                wid = record.settlementWindowId
                state = record.settlementWindowStateId

                allWindows[wid] = {
                    id: wid,
                    state,
                    reason: record.reason,
                    createDate: record.createdDate
                }
            end note
        end 
        |||
        note right of SSAPI #lightgray
            let windowsAccounts = {} // declare sparse array
            let accountsWindows = {} // declare sparse array
        end note
        loop windowsAccountsList as record
            note right of SSAPI #lightgray
                wid = record.settlementWindowId
                aid = record.participantCurrencyId
                state = allAccounts[aid]

                accountsWindows[aid] = accountsWindows[aid] ? accountsWindows[aid] : {
                    id: aid,
                    windows: []
                }
                accountsWindows[aid].windows.push(wid)

                windowsAccounts[wid] = windowsAccounts[wid] ? windowsAccounts[wid] : {
                    id: wid, 
                    pendingSettlementAccounts: [],
                    settledAccounts: [],
                    notSettledAccounts: []
                }
            end note
            alt state == 'PENDING_SETTLEMENT'
                note right of SSAPI #lightgray
                    windowsAccounts[wid].pendingSettlementAccounts.push(aid)
                end note
            else state == 'SETTLED'
                note right of SSAPI #lightgray
                    windowsAccounts[wid].settledAccounts.push(aid)
                end note
            else state == 'NOT_SETTLED'
                note right of SSAPI #lightgray
                    windowsAccounts[wid].notSettledAccounts.push(aid)
                end note
            end
        end 
        |||
        note right of SSAPI #lightgray
            Available objects after the setup:
            **settlementAccounts** is used for tracing settlement state and state transition allowance
            **allParticipants** is used for tracing participant/account state and state transition
            **allAccounts** is helper object, same as previous, providing direct access to account by id
            **allWindows** has window information for all windows in the settlement
            **windowsAccounts** is used for tracing settlement window state and state transition allowance
            **accountsWindows** is helper object to show the list of windows to which settlement account spans

            Now we are ready to process the **payload**:
            **participants** = [] // part of the response object that lists the affected participants and respective accounts
            **affectedWindows** = [] // array of the affected windows
            **settlementParticipantCurrencyStateChange** = [] // array to collect inserts to the table
            **processedAccounts** = [] // array to log processed accounts and restrict subsequent processing
            let **pi** // declare participant index
            let **ai** // declare account index
            let **participant** -- declare pointer to current participant in the //response object//
            let **participantPayload** -- declare pointer to current participant in the //payload object//
            let **accountPayload** -- declare pointer to current account in the //payload object//
        end note
        |||
        loop let p IN payload.participants
            note right of SSAPI #lightgray
                participantPayload = payload.participants[p]
                participants.push({id: participantPayload.id, accounts: []})
                pi = participants.length - 1
                participant = participants[pi]
            end note
            loop let a IN participantPayload.accounts
                note right of SSAPI #lightgray
                    accountPayload = participantPayload.accounts[a]
                end note
                alt allAccounts[accountPayload.id] == undefined
                    note right of SSAPI #lightgray
                        participant.accounts.push({
                            id: accountPayload.id,
                            errorInformation: {
                                errorCode: <integer>,
                                errorDescription: 'Account not found'
                            }
                        })
                    end note
                else processedAccounts.indexOf(accountPayload.id)
                    note right of SSAPI #lightgray
                        participant.accounts.push({
                            id: accountPayload.id,
                            errorInformation: {
                                errorCode: <integer>,
                                errorDescription: 'Account already processed once'
                            }
                        })
                    end note
                else allAccounts[account.id].state == 'PENDING_SETTLEMENT'
                    alt accountPayload.state == 'PENDING_SETTLEMENT' // allowed
                        note right of SSAPI #lightgray
                            processedAccounts.push(accountPayload.id)
                            participant.accounts.push({
                                id: accountPayload.id,
                                state: accountPayload.state,
                                reason: accountPayload.reason,
                                createdDate: transactionTimestamp,
                                netSettlementAmount: allAccounts[accountPayload.id].netSettlementAmount
                            })
                            settlementParticipantCurrencyStateChange.push({
                                settlementParticipantCurrencyId: allAccounts[accountPayload.id].key,
                                settlementStateId: accountPayload.state,
                                reason: accountPayload.reason
                            })
                        end note
                    else accountPayload.state == 'SETTLED' // allowed
                        note right of SSAPI #lightgray
                            processedAccounts.push(accountPayload.id)
                            participant.accounts.push({
                                id: accountPayload.id,
                                state: accountPayload.state,
                                reason: accountPayload.reason,
                                createdDate: transactionTimestamp,
                                netSettlementAmount: allAccounts[accountPayload.id].netSettlementAmount
                            })
                            settlementParticipantCurrencyStateChange.push({
                                settlementParticipantCurrencyId: allAccounts[accountPayload.id].key,
                                settlementStateId: accountPayload.state,
                                reason: accountPayload.reason
                            })
                            settlementAccounts.pendingSettlementCount--
                            settlementAccounts.settledCount++
                            allAccounts[accountPayload.id].state = accountPayload.state
                            allAccounts[accountPayload.id].reason = accountPayload.reason
                            allAccounts[accountPayload.id].createdDate = currentTimestamp
                            //allParticipants[participantPayload.id].accounts[accountPayload.id].state = accountPayload.state//
                            //allParticipants[participantPayload.id].accounts[accountPayload.id].reason = accountPayload.reason//
                            //allParticipants[participantPayload.id].accounts[accountPayload.id].createdDate = currentTimestamp//
                            let settlementWindowId
                        end note
                        loop let aw IN accountsWindows[accountPayload.id].windows
                            note right of SSAPI #lightgray
                                settlementWindowId = accountsWindows[accountPayload.id].windows[aw]
                                _.remove(windowsAccounts[settlementWindowId].pendingSettlementAccounts, (value) => {
                                    value == accountPayload.id
                                }
                                windowsAccounts[settlementWindowId].settledAccounts.push(accountPayload.id)

                                if (affectedWindows.indexOf(settlementWindowId) < 0) {
                                    affectedWindows.push(settlementWindowId)
                                }
                            end note
                        end
                    else accountPayload.state == 'NOT_SETTLED' // conditional
                        note right of SSAPI #lightgray
                            let settlementWindowId
                            let windowAccount
                            let isAllowed = true
                        end note
                        loop let aw IN accountsWindows[accountPayload.id].windows
                            note right of SSAPI #lightgray
                                settlementWindowId = accountsWindows[accountPayload.id].windows[aw]
                                if (windowsAccounts[settlementWindowId].settledCount) > 0 {
                                    isAllowed = false
                                }
                            end note
                        end
                        alt isAllowed == false
                            note right of SSAPI #lightgray
                                processedAccounts.push(accountPayload.id)
                                participant.accounts.push({
                                    id: accountPayload.id,
                                    errorInformation: {
                                        errorCode: <integer>,
                                        errorDescription: 'NOT_SETTLED can not be set when there is a settled account within a window'
                                    }
                                })
                            end note
                        else isAllowed == true
                            loop let aw IN accountsWindows[accountPayload.id].windows
                                note right of SSAPI #lightgray
                                    settlementWindowId = accountsWindows[accountPayload.id].windows[aw]
                                end note
                                loop let wa IN windowsAccounts[settlementWindowId].pendingSettlementAccounts
                                    note right of SSAPI #lightgray
                                        windowAccount = windowsAccounts[settlementWindowId].pendingSettlementAccounts[wa]
                                        processedAccounts.push(windowAccount)
                                    end note
                                    opt participants[allAccounts[windowAccount].participantId] == undefined
                                        note right of SSAPI #lightgray
                                            participants[allAccounts[windowAccount].participantId] = {
                                                id: allAccounts[windowAccount].participantId,
                                                accounts: []
                                            }
                                        end note
                                    end
                                    note right of SSAPI #lightgray
                                        participant = participants[allAccounts[windowAccount].participantId]
                                    end note
                                    opt participant.accounts[windowAccount] != undefined
                                        note right of SSAPI #lightgray
                                            _.remove(participant.accounts[windowAccount], (value) => {
                                                value == participant.accounts[windowAccount]
                                            }
                                        end note
                                    end
                                    note right of SSAPI #lightgray
                                        participant.accounts.push({
                                            id: windowAccount,
                                            state: accountPayload.state,
                                            reason: accountPayload.reason,
                                            createdDate: transactionTimestamp,
                                            netSettlementAmount: allAccounts[windowAccount].netSettlementAmount
                                        })
                                        settlementParticipantCurrencyStateChange.push({
                                            settlementParticipantCurrencyId: allAccounts[windowAccount].key,
                                            settlementStateId: accountPayload.state,
                                            reason: accountPayload.reason
                                        })
                                        settlementAccounts.pendingSettlementCount--
                                        settlementAccounts.notSettledCount++
                                        allAccounts[windowAccount].state = accountPayload.state
                                        allAccounts[windowAccount].reason = accountPayload.reason
                                        allAccounts[windowAccount].createdDate = currentTimestamp
                                        //allParticipants[allAccounts[windowAccount].participantId].accounts[windowAccount].state = accountPayload.state//
                                        //allParticipants[allAccounts[windowAccount].participantId].accounts[windowAccount].reason = accountPayload.reason//
                                        //allParticipants[allAccounts[windowAccount].participantId].accounts[windowAccount].createdDate = currentTimestamp//
                                    end note
                                end
                            end
                        end
                    end
                end
                note right of SSAPI #lightgray
                    
                end note







                |||
                |||
                |||
                SSAPI -> SSAPI: accountIsFound = false
                loop spcStateChangeList as record
                    alt participant.participantId == record.participantId\nand account.participantCurrencyId == record.participantCurrencyId
                        SSAPI -> SSAPI: accountIsFound = true
                        alt record.settlementStateId == 'PENDING_SETTLEMENT'
                            SSAPI -> SSAPI: settlementParticipantCurrencyIdList.push({\n    participantCurrencyId: record.settlementParticipantCurrencyId,\n    reason: 'string'\n})
                            SSAPI -> SSAPI: participantList[participantList.length-1].accounts\n.push({\n    participantCurrencyId: account.participantCurrencyId,\n    reason: 'string',\n    state: 'SETTLED',\n    netSettlementAmount: {\n        amount: record.netAmount\n        currency: record.currencyId\n    }\n})
                        else record.settlementStateId == 'SETTLED'
                            SSAPI -> SSAPI: participantList[participantList.length-1].accounts\n.push({\n    participantCurrencyId: account.participantCurrencyId,\n    errorInformation: {\n        errorCode: 'code',\n        errorDescription: 'Already settled'\n    }\n})
                        end
                        |||
                    end
                    |||
                end
                opt accountIsFound == false
                    SSAPI -> SSAPI: participantList[participantList.length-1].accounts\n.push({\n    participantCurrencyId: account.participantCurrencyId,\n    errorInformation: {\n        errorCode: 'code',\n        errorDescription: 'Account not found'\n    }\n})
                end
                |||
            end
        end
        group <color #blue>DB TRANSACTION</color>
            loop settlementParticipantCurrencyIdList as record
                SSAPI -> SETTLE_DAO: Change settlement participant currency state
                activate SETTLE_DAO
                SETTLE_DAO -> DB: Insert new state 'SETTLED' and record.reason\n<color #FF0000><b>Error code:</b> 2001</color>
                activate DB
                hnote over DB #lightyellow
                    settlementParticipantCurrencyStateChange
                end hnote
                deactivate DB
                deactivate SETTLE_DAO
            end
        end



        SSAPI -> SETTLE_DAO: Get list of all NOT_SETTELED or PENDING_SETTLEMENT\nparticipantCurrencies in settlement
        activate SETTLE_DAO
        SETTLE_DAO -> DB: Retrive list\n<color #FF0000><b>Error code:</b> 2001</color>
        activate DB
        hnote over DB #lightyellow
            SELECT spc.participantCurrencyId
            FROM **settlementParticipantCurrency** spc
            JOIN (SELECT spc.settlementParticipantCurrencyId, 
                         MAX(settlementParticipantCurrencyStateChangeId) AS
                         maxSettlementParticipantCurrencyStateChangeId
                  FROM **settlementParticipantCurrencyStateChange** spcsc
                  JOIN **settlementParticipantCurrency** spc
                  ON spc.settlementParticipantCurrencyId = spcsc.settlementParticipantCurrencyId
                  WHERE spc.settlementId = {id}) AS mx
            ON mx.settlementParticipantCurrencyId = spc.settlementParticipantCurrencyId
            JOIN **settlementParticipantCurrencyStateChange** spcsc
            ON spcsc.settlementParticipantCurrencyStateChangeId = 
               mx.maxSettlementParticipantCurrencyStateChangeId
            WHERE spc.settlementId = {id}
            AND spcsc.settlementStateId != 'SETTLED'
        end hnote
        SETTLE_DAO <-- DB: Return list
        deactivate DB
        SSAPI <-- SETTLE_DAO: Return **settlementParticipantCurrencyList**
        deactivate SETTLE_DAO

        group Settle settlementWindows
            SSAPI -> SSAPI: allWindowsList = []\nnotSettledWindowsList = []
            loop settlementWindowsParticipantCurrencyList as window
                opt window.settlementWindowId NOT IN allWindowsList
                    SSAPI -> SSAPI: allWindowsList.push(window.settlementWindowId)
                end
                loop settlementParticipantCurrencyList as pc
                    opt pc.participantCurrencyId == window.participantCurrencyId
                        SSAPI -> SSAPI: notSettledWindowsList.push(window.settlementWindowId)
                    end
                end
            end
            SSAPI -> SSAPI: settledWindowsList = _.difference(allWindowsList, notSettledWindowsList)

            group <color #blue>DB TRANSACTION</color>
                loop settledWindowsList as record
                    SSAPI -> SETTLE_DAO: Change settlement window state for record.settlementWindowId
                    activate SETTLE_DAO
                    SETTLE_DAO -> DB: Insert new state 'SETTLED'\n<color #FF0000><b>Error code:</b> 2001</color>
                    activate DB
                    hnote over DB #lightyellow
                        settlementWindowStateChange
                    end hnote
                    deactivate DB
                    deactivate SETTLE_DAO
                end
            end
        end

        ' construct settlementWindows
        ' check if all settlementWindows are SETTLED and if yes {
        '     SETTLE the settlement (update database)
        '     set settlement.state = SETTLED
        ' } else {get settlement state from database}
        ' return the result

    else settlementStateChange IN ['NOT_SETTLED', 'SETTLED']
        ' return {id, state}
        |||
    end

    note left of SSAPI #lightyellow
        [
          {
            "id": 0,
            "state": <enum>,
            "createdDate": <date>,
            "settlementWindows": [
              [
                {
                  "id": 0,
                  "state": <enum>,
                  "reason": <string>,
                  "createdDate": <date>
                }
              ]
            ],
            "participants": [
              {
                "id": 0,
                "accounts": [
                  {
                    "id": 1,
                    "state": "SETTLED",
                    "reason": <string>,
                    "createdDate": <date>,
                    "netSettlementAmount": {
                      "amount": 0,
                      "currency": <enum>
                    }
                  },
                  {
                    "id": 2,
                    "state": "SETTLED",
                    "reason": <string>,
                    "createdDate": <date>,
                    "netSettlementAmount": {
                      "amount": 0,
                      "currency": <enum>
                    },
                    "errorInformation": {
                      "errorCode": 8001,
                      "errorDescription": <string>
                    }
                  }
                ]
              }
            ]
          }
        ]
    end note
    deactivate SSAPI
end
@enduml
